<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MarkDown 笔记]]></title>
    <url>%2F2017%2F09%2F28%2Fmarkdown-note%2F</url>
    <content type="text"><![CDATA[由于 Hexo Markdown 插件渲染的关系，并不是所有的效果都能显示。 MarkDown 一种用于写作的轻量级【标记语言】。它用简洁的语法代替排版，而不像一般的文字处理软件 Word 或者 Pages 有大量的排版、字体设置等。 如果你对文章的样式没有太多要求，只注重写文章本身的话 MarkDown 将会是一个不错的选择。 一、工具支持 MarkDown 写作的软件有很多，因为国外平台的国内访问大都不太稳，这里就列举几个国内常用的： 简书 博客平台，书写的时候每隔几秒钟就会自动备份一次，需要注册才能使用。 马克飞象 付费软件，对于映像笔记用户来说是个不错的选择。 Cmd MarkDown 作业部落的产品，跨平台，支持 Windows、Linux、Mac 和 Web。而且提供了备份等功能。 Atom 著名的 Github 推出的编辑器，功能强大，支持原生实时预览。实时预览快捷键 ctrl+shift+m 。 二、基本语法MarkDown 对于标题呀、字体呀等可能有多种写法。个人建议初学的时候记忆一种语法就好，待熟练后若有兴趣可多记几种。 1.标题MarkDown 支持 1~6 级标题，通过加在标题文字前的 # 来区分。例如， 1234# 这是一级标题## 这是二级标题...###### 这是六级标题 Tips: # 和标题文字之间是有一个空格的。 2.段落很简单，一行文字就是一个段落。例如， 1这是一行文字，MarkDown 中的段落。 如果要换行，那么两行之间要隔一个空行。例如， 123这是一行文字，MarkDown 中的段落。 //这行是空行这是另一行文字，MarkDown 中的段落。 3.粗体和斜体Markdown 中字体的粗体和斜体用 * 表示。例如， 123*这里是斜体***这里是粗体*****这里是粗体 + 斜体*** 效果如下： 这里是斜体 这里是粗体 这里是粗体 + 斜体 4.删除线可能有一部分编辑器不支持这个元素。删除线用 ~ 定义。例如， 1~~这里有删除线~~ 效果如下： 这里有删除线 Tips: 删除线要用两个 ~ 来包裹文字。 5.引用在一行文字前添加大于号 &gt; 来使用引用格式。例如， 1&gt;这里是引用句子。 效果如下： 这里是引用句子。 引用可以嵌套使用，例如： 1&gt;&gt;这里使用了嵌套引用。 效果如下： 这里使用了嵌套引用。 也可以嵌套其他格式。例如， 123&gt; ## 嵌套一个二级标题。&gt; *嵌套斜体字。*&gt; **嵌套粗体字。** 效果如下： 嵌套一个二级标题。嵌套斜体字。 嵌套粗体字。 6.列表列表分为无序列表和有序列表。 无序列表使用加号、减号和星号来标记。例如， 1234567891011+ 加号列表+ 加号列表+ 加号列表- 减号列表- 减号列表- 减号列表* 星号列表* 星号列表* 星号列表 效果如下： 加号列表 加号列表 加号列表 减号列表 减号列表 减号列表 星号列表 星号列表 星号列表 有序列表使用数字加上英文句点标记。 1231.有序列表2.有序列表3.有序列表 7.内联代码内联代码用反引号 ` 表示。例如， 1234567`code`有的地方说用单个 ` 即可表示内联代码，由于我用的是 Atom 编辑器，单个 ` 不起作用，只好用两个 ` 将代码包裹起来。如果代码中有反引号 ` ，也可以两个反引号将它包裹起来，但是要加空格。例如，` ` ` 效果如下： code ` 8.代码块有两种风格，原生和 Github 。 原生风格，首行缩进四个空格。例如， 123这是一个普通段落。 这是一个代码块。 效果如下： 这是一个普通段落。 这是一个代码块。 Github 风格，代码块的前后用三个反引号独占一行来标记。效果如下， 1这里是代码块。 9.分割线分割线可以用三个以上的星号、减号或者底线来标识，行内不能有其他东西，但是可以插入空格。例如， 1234567891011**** * *---- - -____ _ _ 效果如下： 10.链接链接用下面的格式标识。例如， 1[链接要显示的文字](http://www.zhihu.com &quot;鼠标箭头放到链接上的提示文字，可以不写，与链接之间留有空格&quot;) 效果如下： 链接要显示的文字 还可以用另外的格式标识， 1[链接要显示的文字][id] 在任意空白位置， 1[id]:http://www.zhihu.com &quot;鼠标箭头放到链接上的提示文字，可以不写，与链接之间留有空格&quot; 效果也是一样的， 链接要显示的文字 11.自动链接如果链接的地址和要显示的文字一样的话，可以用尖括号将其包裹形成自动连接。例如， 1&lt;http://www.zhihu.com&gt; 效果如下： http://www.zhihu.com 12.图片图片的标识与链接类似。语法如下， 1![图片不存在时的提示文字](http://images.cnblogs.com/cnblogs_com/zhangyn/922022/o_%e6%89%8b.jpg &quot;鼠标箭头放到图片上的提示文字&quot;) 效果如下： 图片的 MarkDown 标识与 HTML 标签有对应的关系，关系如下， 123![img alt 属性](img 地址 “img title 属性”)&lt;img src=&apos;img 地址&apos; alt=&apos;img alt 属性&apos; title=&apos;img title 属性&apos;&gt; 13.转义支持在前面插入反斜杠转义的字符如下， 123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 效果如下： \ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 14.表格原本是 Github 风格的语法，大部分编辑器都支持。 12345| 键 | 值 | 备注 ||----|----:|:------:||MacBookPro|￥12000|办公用品||打印机|￥12000|办公用品||台式电脑|￥12000|办公用品| 效果如下： 键 值 备注 MacBookPro ￥12000 办公用品 打印机 ￥1200 办公用 台式电脑 ￥120 办 Tips:第一行表头可以不要，第二行必须要有，第二行的冒号标识表中内容居左、居右还是剧中，如果不加冒号默认居左。 15.内嵌 HTML MarkDown 保留了内嵌 HTML 的语法，标签中的内容都会输入到结果中。例如， 12345678910111213&lt;html&gt; &lt;body&gt; &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=64447&amp;auto=0&amp;height=66&quot;&gt; &lt;/iframe&gt; &lt;/body&gt;&lt;/html&gt; 效果如下： 三、综述至此，就可以用 MarkDown 来写一般的文章啦。当然，如果有特殊的需求，比如：输入公式或者画 UML 图，那么可以参考下面的链接： MarkDown Tex 公式输入语法参考 MarkDown 时序图语法参考 MarkDown 流程图语法参考]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 博客搭建]]></title>
    <url>%2F2017%2F09%2F21%2Fbuild-blog%2F</url>
    <content type="text"><![CDATA[简单记录搭建博客的过程。 本地搭建 Hexo 博客基本安装按照 Hexo 官网的方法，检查是否已经安装 Git 和 Node.js。然后顺序操作。需要注意的是，安装上述软件及 Hexo 时可能需要挂代理，不然下载太慢。可以使用 Lantern，如果还是慢就需要耐心等待了。到此基本就可以安装成功了。 本地安装成功后，就可以生成 blog ，查看本地效果了。在安装的文件夹下鼠标右键 Git Bash Here 打开 Git 命令行依次使用 123$ hexo g //生成静态文件$ hexo s //运行本地服务器 窗口会提示 blog 本地地址，一般是 http://localhost:4000，打开这个地址就可以预览本地效果。 自定义Hexo Blog 的自定义大部分在安装文件夹的根目录的 _config.yml 文件中修改，具体可以参照官网的说明 （Hexo Blog 自定义配置） 按照自己的需求修改。 优化预览本地效果时，可以看到浏览器一直在加载，猜测可能是某些资源或者脚本加载超时，由于不是搞前端的，遂直接搜索一番。果然，原来是 hexo blog 默认主题 landscape 使用了 Google 的 jQuery 库和代码等宽字体库，所以国内访问不到。解决方法，jQuery 替换为百度的 jQuery 库，Google 字体库的话直接删除。最后还有一个跨平台的字体优化，详情见这里 Hexo Landscape主题的字体和JS库优化 ，在上述链接中有一处错误。即最后一段 代码等宽字体优化中需要编辑的文件为 Hexo blog 安装文件夹\themes\landscape\layout_partial\head.ejs 。 至此，本地基本安装及优化完毕。 部署到 GitHub注册 GitHub 账号需要注意的是注册时 username 和 之后 blog 的地址有关。即 username.github.io 所以要慎重填写。注册完后新建一个名字为 username.github.io 的项目。配置 _config.yml 文件中的 deploy，即 1234deploy: type: git repository: https://github.com/username/username.github.io.git branch: master 注意 deploy 配置中冒号与后面内容是有空格的。 至此，可以尝试使用 hexo d 命令部署到刚才新建的 username.github.io 的空项目。过程中按照提示操作即可。还有可能出现 403 等权限错误，那就需要下的配置SSH KEY 了。 配置 SSH KEY生成 SSH 密钥任意位置鼠标右键 Git Bash Here 打开命令行，输入 12$ cd ~/.ssh# Checks to see if there is a directory named ".ssh" in your user directory 在用户的根目录下检查是否有名为 ".ssh" 的文件存在。一般第一使用的话是没有的。 使用 ssh-keygen 生成密钥 1234$ ssh-keygen -t rsa -C "your_email@example.com"# Creates a new ssh key using the provided email 即注册 GitHub 账号的邮箱Generating public/private rsa key pair.Enter file in which to save the key (/home/you/.ssh/id_rsa): 保存密钥对的文件是可以自定义的，当然也可不填直接 Enter 使用括号中的默认值。接下来是输入密码及确认密码。 12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 此处的密码可以自定义或者不设密码。接着会提示密钥对生成成功。 1234Your identification has been saved in /home/you/.ssh/id_rsa.Your public key has been saved in /home/you/.ssh/id_rsa.pub.The key fingerprint is:…………………此处是密钥内容…………………… your_email@example.com GitHub 项目的公钥设置打开 username.github.io 项目的 setting 找到 Deploy keys 点击 add deply key ，将上步中已经生成了密钥 id_rsa.pub 中的内容复制到 key 输入框中 title 自定义即可。其实也可以在整个账号的 settings –&gt; SSH and GPG keys 中的 SSH keys 中添加公钥。 然后测试配置是否成功，命令行输入 1$ ssh -T git@github.com 提示出现成功即可 12Hi username! You've successfully authenticated, but GitHub does notprovide shell access. 修改 _config.yml 的 deployrepo 地址改用 ssh 形式，即 1234deploy: type: git repository: git@github.com:username/username.github.io.git branch: master 至此，就可以成功部署到 GitHub 了。 部署到 GitHub 时，多账号引起的错误当使用多个账号部署时可能发生下面的错误，即 1234567891011121314remote: Permission to 第二个账号username/第二个账号username.github.io.git denied to 第一个账号username.fatal: unable to access 'https://github.com/第二个账号username/第二个账号username.github.io.git/': The requested URL returned error: 403FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: remote: Permission to 第二个账号username/第二个账号username.github.io.git denied to 第一个账号username.fatal: unable to access 'https://github.com/第二个账号username/第二个账号username.github.io.git/': The requested URL returned error: 403 at ChildProcess.&lt;anonymous&gt; (/.../第二个账号username.github.io/node_modules/hexo-util/lib/spawn.js:37:17) at emitTwo (events.js:87:13) at ChildProcess.emit (events.js:172:7) at maybeClose (internal/child_process.js:827:16) at Socket.&lt;anonymous&gt; (internal/child_process.js:319:11) at emitOne (events.js:77:13) at Socket.emit (events.js:169:7) at Pipe._onclose (net.js:477:12) 错误原因，默认情况下，github page 是私有项目，只有该 page 对应的账号才能提交代码。上述错误是第二个账号的仓库拒绝了第一个账号的提交。出现这种情况的原因是:安装Git时安装了GitGUI，自动在 system 级别中设置 credential.helper=manager 。并且不论配置所处级别（system、global或者local）如何，一旦设置了 manager ，都优先使用该方式。具体到该错误就是：该Win系统第一次使用 https 协议提交代码时，弹出了登陆 GitHub 的登陆界面，输入账号密码之后，顺利提交代码，同时 Git 自动在 system 级别中设置 credential.helper=manager ，并使用 Windows 的凭据管理保存了 GitHub 的登陆信息，而且登陆信息是全局性的，除非删除，否则无法通过 git 设置 local 或者 global 信息改变。提交另一项目时切换了账号，而全局的登陆信息还没有改变，所以出现了上述错误。 解决方法，在 Windows 控制面板–&gt;用户账户–&gt;管理你的凭据–&gt;Windows凭据 中找到关于 github.com 的凭据删除，然后重新 hexo d 按提示操作即可。 关于 GitHub 多账号问题 使用自己的顶级域名使用自己域名的话，主要涉及到域名解析的问题，具体可以参考各大 DNS 解析服务商的说明。]]></content>
      <tags>
        <tag>hexo、blog</tag>
      </tags>
  </entry>
</search>
